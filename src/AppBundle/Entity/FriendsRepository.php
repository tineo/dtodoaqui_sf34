<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FriendsRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class FriendsRepository extends EntityRepository
{

  /**
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\Entity\User $new_friend
   *
   * @return \AppBundle\Entity\Friends
   */
  public function addNewFriend(User $user, User $new_friend)
  {
    if($fds = $this->areFriendship($user, $new_friend)){
      return null;
    }else {
      $friend = new Friends();
      $friend->setUserId($user->getId())
             ->setFriendUserId($new_friend->getId());

      return $friend;
    }
  }

  /**
   * @param $user_id
   * @param $new_friend_id
   *
   * @return \AppBundle\Entity\Friends
   * @internal param \AppBundle\Entity\User $user
   * @internal param \AppBundle\Entity\User $new_friend
   *
   */
  public function addNewFriendByIds($user_id, $new_friend_id)
  {
    if($fds = $this->areFriendshipByIds($user_id, $new_friend_id)){
      return null;
    }else {
      $friend = new Friends();
      $friend->setUserId($user_id)
             ->setFriendUserId($new_friend_id);

      return $friend;
    }
  }


  /**
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\Entity\User $new_friend
   *
   * @return \AppBundle\Entity\Friends
   */
  public function areFriendship(User $user, User $new_friend){
    $fd = $this->areFriendshipByIds($user->getId(), $new_friend->getId());
    return $fd;
  }

  /**
   * @param $user_id
   * @param $new_friend_id
   *
   * @return \AppBundle\Entity\Friends
   * @internal param int $user
   * @internal param int $new_friend
   *
   */
  public function areFriendshipByIds($user_id, $new_friend_id){
    $fd = $this->getEntityManager()
               ->createQuery("SELECT f FROM AppBundle:Friends f 
                                WHERE ( f.user_id = :user_id AND f.friend_user_id = :f_user_id)
                                OR ( f.user_id = :f_user_id AND f.friend_user_id = :user_id)")
               ->setParameters(array(
                 'user_id' => $user_id,
                 'f_user_id' => $new_friend_id
               ))
               ->getOneOrNullResult();

    return $fd;
  }

  /**
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\Entity\User $new_friend
   *
   * @return \AppBundle\Entity\Friends
   */
  public function confirmFriendship(User $user, User $new_friend){
    if($fds = $this->areFriendship($user, $new_friend)){
      return $fds->setStatus(Friends::STATUS_ARE);
    }else{
      return $fds;
    }
  }


  /**
   * @param $user_id
   * @param $new_friend_id
   *
   * @return \AppBundle\Entity\Friends
   * @internal param \AppBundle\Entity\User $user
   * @internal param \AppBundle\Entity\User $new_friend
   *
   */
  public function confirmFriendshipByIds($user_id, $new_friend_id){
    if($fds = $this->areFriendshipByIds($user_id, $new_friend_id)){
      return $fds->setStatus(Friends::STATUS_ARE);
    }else{
      return $fds;
    }
  }

  public function getReqsFriendship($user_id){
    $fds = $this->getEntityManager()
      ->getRepository(Friends::class)
      ->findBy(array("friend_user_id" => $user_id));
    return $fds;
  }


}
